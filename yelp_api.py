"""Command line interface to the Yelp Search API."""import jsonimport oauth2import optparseimport urllibimport urllib2import pymongofrom pymongo import MongoClientcategories = ['food', 'shopping'] #, 'active', 'restaurants', 'beautysvc', 'nightlife', 'education', 'arts']# Setup URL params from optionsurl_params = {}#url_params['location'] = "31st and Broadway, NY"url_params['ll'] = '40.77742172100596'+','+' -73.9599609375'url_params['radius_filter'] = 1000 #radius in metersurl_params['category_filter'] = "food"url_params['sort'] = 2consumer_key = 'WoH7PFlWIbmnKuvGdMaNhw'consumer_secret = 'GNCVbv7iijc2WbWp3JqA8p0VIok'token = '_XgyWyzcARzjGI2f61fB1gZCE8P8ZT_o'token_secret = 'U4AgG6kBapGMhPoGTqGQRFSjJ4w'def request(host, path, url_params, consumer_key, consumer_secret, token, token_secret):  """Returns response for API request."""  # Unsigned URL  encoded_params = ''  if url_params:    encoded_params = urllib.urlencode(url_params)  url = 'http://%s%s?%s' % (host, path, encoded_params)  # Sign the URL  consumer = oauth2.Consumer(consumer_key, consumer_secret)  oauth_request = oauth2.Request('GET', url, {})  oauth_request.update({'oauth_nonce': oauth2.generate_nonce(),                        'oauth_timestamp': oauth2.generate_timestamp(),                        'oauth_token': token,                        'oauth_consumer_key': consumer_key})  token = oauth2.Token(token, token_secret)  oauth_request.sign_request(oauth2.SignatureMethod_HMAC_SHA1(), consumer, token)  signed_url = oauth_request.to_url()  # Connect  try:    conn = urllib2.urlopen(signed_url, None)    try:      response = json.loads(conn.read())    finally:      conn.close()  except urllib2.HTTPError, error:    response = json.loads(error.read())  return response#apartment['location']['lat'] or ['lng']response = request('api.yelp.com', '/v2/search', url_params, consumer_key, consumer_secret, token, token_secret)apt_id = [345,543, 754, 321,543,764,99]conn = MongoClient()db =  conn.business_databaseapts = conn.apartment_databasebusinesses = db.businessescat_score = [0. for c in categories]for i, category in enumerate(categories):	url_params['category_filter'] = category	response = request('api.yelp.com', '/v2/search', url_params, consumer_key, consumer_secret, token, token_secret)	ratings_tot = 0	for business in response['businesses']:				business['_id'] = business['id'] #This lets MongoDB use Yelp's ID for the internal database ID, makes it easier to deal with duplicates		#businesses.find_and_modify({ "_id":business['_id']}, businesses.find({ "_id":business['_id']}['nearby_apts'].append(apt_id)), upsert = True)		#businesses.find_and_modify( { "_id":business['id']}, { "$push": { 'nearby_apts': "apt_id"} } , upsert="True")		business['nearby_apts'] = [816]		businesses.save(business)				new_apts = (businesses.find({ '_id':business['id']}, { 'nearby_apts': 1 })).next()['nearby_apts'] 		new_apts.append(apt_id[i])		print new_apts		#businesses.update( { "_id":business['id']}, { "$set": { 'nearby_apts': new_apts} } , True)		ratings_tot += business['rating']			cat_score[i] = 20.*(3.+ratings_tot)/(1.+len(response['businesses']))	print category, cat_score[i]	print businesses.find_one()	businesses.remove()		#get to the point of calculating scores for any coordinate points 